<?php
/**
 * @file
 * Contains install hooks for termstatus module.
 */

use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Handle the out-of-the box necessities.
 *
 * Implements hook_install().
 */
function termstatus_install() {

  // Create field storage for the 'Status' base field.
  $field_manager = \Drupal::service('entity_field.manager');
  $field_storage_manager = \Drupal::service('field_storage_definition.listener');
  $definition = $field_manager->getFieldStorageDefinitions('taxonomy_term')['status'];
  $field_storage_manager->onFieldStorageDefinitionCreate($definition);

  $vocabularies = termstatus_get_vocabularies();

  if ($vocabularies) {

    foreach ($vocabularies as $vocabulary) {
      $vid = $vocabulary->id();

      $terms = \Drupal::entityTypeManager()
                      ->getStorage('taxonomy_term')
                      ->loadTree($vid, 0, NULL, TRUE);

      // Migrate all existing terms to published state.
      if (!empty($terms)) {
        foreach ($terms as $term) {
          $term->set('status', TRUE);
          $term->save();
        }
      }

      // Give existing roles the view permission.
      $permission = 'view published terms in ' . $vid;
      termstatus_grant_permission_to_existing_roles($permission);

    }
  }

}

/**
 * Revokes view permissions from existing roles.
 *
 * Implements hook_uninstall().
 */
function termstatus_uninstall() {

  $vocabularies = termstatus_get_vocabularies();

  if ($vocabularies) {
    /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
    foreach ($vocabularies as $vocabulary) {

      $permission = 'view published terms in ' . $vocabulary->id();
      termstatus_grant_permission_to_existing_roles($permission);

    }
  }
}

/**
 * Helper function to grant existing roles view permissions.
 *
 * @param $permission
 */
function termstatus_grant_permission_to_existing_roles($permission) {
  $roles = Role::loadMultiple();

  /** @var Role $role */
  foreach ($roles as $role) {
    $role->grantPermission($permission);
    $role->save();
  }
}

/**
 * Helper function to revoke existing roles of view permissions.
 *
 * @param $permission
 */
function termstatus_revoke_permission_from_existing_roles($permission) {

  $roles = Role::loadMultiple();

  /** @var Role $role */
  foreach ($roles as $role) {
    $role->revokePermission($permission);
    $role->save();
  }
}